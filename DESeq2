if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("readr")
install.packages("ggrepel")

library(DESeq2)
library(tidyverse)
library(ggplot2)
library(readr)
library(ggrepel)

#Credits to: https://ashleyschwartz.com/posts/2023/05/deseq2-tutorial

#Read in dataframe
counts_HP126C <- read_tsv("SRR24516459_sorted_counts.txt", col_names = c("Gene", "MutantC"))
counts_HP126B <- read_tsv("SRR24516460_sorted_counts.txt", col_names = c("Gene", "MutantB"))
counts_HP126A <- read_tsv("SRR24516461_sorted_counts.txt", col_names = c("Gene", "MutantA"))

counts_R7C <- read_tsv("SRR24516462_sorted_counts.txt", col_names = c("Gene", "WiltypeC"))
counts_R7B <- read_tsv("SRR24516463_sorted_counts.txt", col_names = c("Gene", "WildtypeB"))
counts_R7A <- read_tsv("SRR24516464_sorted_counts.txt", col_names = c("Gene", "WildtypeA"))

#To run DESeq2, all gene count data should be in one data frame.
#We need to merge data sets based on "Gene".

dataframe_list <- list(counts_HP126C, counts_HP126B, counts_HP126A, counts_R7C, counts_R7B, counts_R7A)

#Merge all dataframes in list
count_data <- dataframe_list %>% reduce(full_join, by='Gene')

#Make Gene the row id
count_data <- count_data %>% remove_rownames %>% column_to_rownames(var="Gene")
head(count_data)

#We need a meta data table
#Get the sample names from the count_data matrix
sample_name <- c(colnames(count_data))

#Specify the conditions for each sample
condition <- c("mutant", "mutant", "mutant", "wildtype", "wildtype", "wildtype")

#Generate the metadata dataframe
meta_data <- data.frame(sample_name, condition)

#Make the sample name the row id
meta_data <- meta_data %>% remove_rownames %>% column_to_rownames(var="sample_name")
meta_data

#Double check that the name in the counts matrix is same in meta data
all(colnames(count_data) %in% rownames(meta_data))
all(colnames(count_data) == rownames(meta_data))

#Create deseq data set object
dds <- DESeqDataSetFromMatrix(countData = count_data,
                              colData = meta_data,
                              design = ~ condition)
dds

#Filter any counts less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds

#Set the reference to be the wildtype
dds$condition <- relevel(dds$condition, ref = 'Wildtype')

#Run differential expression 
dds <- DESeq(dds)
res <- results(dds)

res
summary(res)

#Exact number of adjusted p-alues below 0.01
sum(res$padj < 0.1, na.rm=TRUE)

#We often want to look at those <0.05
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res$padj < 0.05, na.rm=TRUE)

#Order results by p-value
res_ordered <- res[order(res$pvalue),]
head(res_ordered)

#Convert results data to basic dataframe
data <- data.frame(res)
head(data)

#PCA plot
#The function plotPCA() requires two arguments as input: 
#an rlog object and the intgroup (the column in our metadata 
#that we are interested in).
rld <- rlog(dds)
plotPCA(rld)

#Add an additional column that identifies a gene as unregulated, downregulated, or unchanged
#Note the choice of pvalue and log2FoldChange cutoff. 
data <- data %>%
  mutate(
    Expression = case_when(log2FoldChange >= log(1) & padj <= 0.05 ~ "Up-regulated",
                           log2FoldChange <= -log(1) & padj <= 0.05 ~ "Down-regulated",
                           TRUE ~ "Unchanged")
  )
head(data)

#Get the Top 10 most variable genes
top <- 10 
top_genes <- bind_rows(
  data %>%
    filter(Expression == 'Up-regulated') %>%
    arrange(padj, desc(abs(log2FoldChange))) %>%
    head(top),
  data %>%
    filter(Expression == 'Down-regulated') %>%
    arrange(padj, desc(abs(log2FoldChange))) %>%
    head(top)
)
# create a dateframe just holding the top 10 genes
top_hits = head(arrange(data,pvalue),10)
top_hits

#Volcano plot
data$label = if_else(rownames(data) %in% rownames(top_hits), rownames(data), "")
#Basic plot
p1 <- ggplot(data, aes(log2FoldChange, -log(pvalue,10))) + # -log10 conversion
  geom_point( size = 2/5) +
  xlab(expression("log"[2]*"FC")) +
  ylab(expression("-log"[10]*"P-Value")) +
  xlim(-4.5, 4.5)
p1

#Basic plot with line + red for p < 0.05
p2 <- ggplot(data, aes(log2FoldChange, -log(pvalue,10))) + # -log10 conversion
  geom_point(aes(color = Expression), size = 2/5) +
  #geom_hline(yintercept= -log10(0.05), linetype="dashed", linewidth = .4) +
  xlab(expression("log"[2]*"FC")) +
  ylab(expression("-log"[10]*"P-Value")) +
  scale_color_manual(values = c("firebrick3", "black", "firebrick3")) +
  xlim(-4.5, 4.5) +
  theme(legend.position = "none")
p2

#With labels for top 10 sig overall
library(ggrepel)
p3 <- ggplot(data, aes(log2FoldChange, -log(pvalue,10))) + # -log10 conversion
  geom_point(aes(color = Expression), size = 2/5) +
  # geom_hline(yintercept=-log10(0.05), linetype="dashed", linewidth = .4) +
  xlab(expression("log"[2]*"FC")) +
  ylab(expression("-log"[10]*"P-Value")) +
  scale_color_manual(values = c("firebrick3", "black", "firebrick3")) +
  xlim(-13.5, 13.5) +
  theme(legend.position = "none") +
  geom_text_repel(aes(label = label), size = 2.5)
p3

#Up/downregulated genes with labels
p4 <- ggplot(data, aes(log2FoldChange, -log(pvalue,10))) + # -log10 conversion
  geom_point(aes(color = Expression), size = 2/5) +
  # geom_hline(yintercept=-log10(0.05), linetype="dashed", linewidth = .4) +
  xlab(expression("log"[2]*"FC")) +
  ylab(expression("-log"[10]*"P-Value")) +
  scale_color_manual(values = c("dodgerblue3", "black", "firebrick3")) +
  xlim(-13.5, 13.5) +
  geom_text_repel(aes(label = label), size = 2.5)
p4

                  point.padding = 0.3,
                  segment.color = 'gray40') +
  theme_minimal()

